{
  "language": "Solidity",
  "sources": {
    "src/DSCEngine.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport {DecentralizedStableCoin} from \"./DecentralizedStableCoin.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport {OracleLib} from \"src/libraries/OracleLib.sol\";\n\n/**\n * @title DSCEngine\n * @author Antoine Douchet\n * This system is designed to maintain the DecentralizedStableCoin at its peg of 1 USD.\n * It is similar to DAI, if it had no governance and was only backed by wETH and wBTC\n *\n * @notice This contract is the core system of the DSC system, it handles the logic for minting and burning DSC tokens, depositing and withdrawing collateral\n * @notice This contract is based on the MakerDao DSS (DAI) system\n */\ncontract DSCEngine is ReentrancyGuard {\n    /*//////////////////////////////////////////////////////////////\n                                 ERRORS\n    //////////////////////////////////////////////////////////////*/\n    error DSCEngine__NeedsMoreThanZero();\n    error DSCEngine__TokenAndPriceFeedArrraysLengthMismatch();\n    error DSCEngine__TokenNotAllowed();\n    error DSCEngine__TransferFailed();\n    error DSCEngine__UserHealthFactorIsTooLow(uint256 userHealthFactor);\n    error DSCEngine__MintFailed();\n    error DSCEngine__UserHealthFactorOk();\n    error DSCEngine__UserHealthFactorNotImproved();\n\n    /*//////////////////////////////////////////////////////////////\n                                 TYPES\n    //////////////////////////////////////////////////////////////*/\n    using OracleLib for AggregatorV3Interface;\n\n    /*//////////////////////////////////////////////////////////////\n                             STATEVARIABLES\n    //////////////////////////////////////////////////////////////*/\n\n    address[] private s_collateralTokens;\n    mapping(address token => address priceFeed) private s_priceFeeds;\n    mapping(address user => mapping(address token => uint256 amount)) private s_collateralDeposited;\n    mapping(address user => uint256 dscMinted) private s_dscMinted;\n\n    DecentralizedStableCoin private i_dsc;\n\n    uint256 private constant ADDITIONAL_FEED_PRECISION = 1e10;\n    uint256 private constant PRECISION = 1e18;\n    uint256 private constant LIQUIDATION_THRESHOLD = 50;\n    uint256 private constant LIQUIDATION_PRECISION = 100;\n    uint256 private constant MINIMAL_HEALTH_FACTOR = 1e18;\n    uint256 private constant LIQUIDATION_BONUS = 10;\n    uint256 private constant DEFAULT_HEALTH_FACTOR = 1000e18;\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n    event CollateralDeposited(address indexed user, address indexed token, uint256 indexed amount);\n    event CollateralRedeemed(address indexed from, address indexed to, address indexed token, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                               MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n    modifier moreThanZero(uint256 amount) {\n        if (amount == 0) {\n            revert DSCEngine__NeedsMoreThanZero();\n        }\n        _;\n    }\n\n    modifier tokenAllowed(address token) {\n        if (s_priceFeeds[token] == address(0)) {\n            revert DSCEngine__TokenNotAllowed();\n        }\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n    constructor(address[] memory tokenAddresses, address[] memory priceFeedAddresses, address dscAddress) {\n        if (tokenAddresses.length != priceFeedAddresses.length) {\n            revert DSCEngine__TokenAndPriceFeedArrraysLengthMismatch();\n        }\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\n            s_priceFeeds[tokenAddresses[i]] = priceFeedAddresses[i];\n            s_collateralTokens.push(tokenAddresses[i]);\n        }\n        i_dsc = DecentralizedStableCoin(dscAddress);\n    }\n\n    /**\n     * In one step, deposits the user's selected collateral and mints wanted amount of Decentralized StableCoin\n     * @param tokenCollateralAddress the address of the token to be deposited as collateral\n     * @param amountCollateral the amount of the token to be deposited as collateral\n     * @param amountDscToMint the amount of Decentralized StableCoin to be minted\n     */\n    function depositCollateralAndMintDsc(\n        address tokenCollateralAddress,\n        uint256 amountCollateral,\n        uint256 amountDscToMint\n    ) external {\n        depositCollateral(tokenCollateralAddress, amountCollateral);\n        mintDsc(amountDscToMint);\n    }\n\n    /**\n     *\n     * @param tokenCollateralAddress address of the token to be deposited as collateral\n     * @param amountCollateral amount of the token to be deposited as collateral\n     * @notice the token must be part of the allowed list of tokens\n     */\n    function depositCollateral(address tokenCollateralAddress, uint256 amountCollateral)\n        public\n        moreThanZero(amountCollateral)\n        tokenAllowed(tokenCollateralAddress)\n        nonReentrant\n    {\n        s_collateralDeposited[msg.sender][tokenCollateralAddress] += amountCollateral;\n        emit CollateralDeposited(msg.sender, tokenCollateralAddress, amountCollateral);\n        bool success = IERC20(tokenCollateralAddress).transferFrom(msg.sender, address(this), amountCollateral);\n        if (!success) {\n            revert DSCEngine__TransferFailed();\n        }\n    }\n\n    /**\n     *\n     * @param tokenCollateralAddress the address of the token to be redeemed\n     * @param amountCollateral the amount of the token to be redeemed\n     * @param amountDscToBurn the amount of Decentralized StableCoin to be burned\n     */\n    function redeemCollateralForDsc(address tokenCollateralAddress, uint256 amountCollateral, uint256 amountDscToBurn)\n        external\n    {\n        burnDsc(amountDscToBurn);\n        redeemCollateral(tokenCollateralAddress, amountCollateral);\n    }\n\n    function redeemCollateral(address tokenCollateralAddress, uint256 amountCollateral)\n        public\n        moreThanZero(amountCollateral)\n        tokenAllowed(tokenCollateralAddress)\n        nonReentrant\n    {\n        _redeemCollateral(msg.sender, msg.sender, tokenCollateralAddress, amountCollateral);\n        _revertIfHealthFactorIsBroken(msg.sender);\n    }\n\n    /**\n     *\n     * @param amountDscToMint amount of Decentralized StableCoin to be minted\n     * @notice the amount of DSC to be minted must be lower than the threshold based on value of the collateral deposited\n     */\n    function mintDsc(uint256 amountDscToMint) public moreThanZero(amountDscToMint) nonReentrant {\n        s_dscMinted[msg.sender] += amountDscToMint;\n        _revertIfHealthFactorIsBroken(msg.sender);\n        bool minted = i_dsc.mint(msg.sender, amountDscToMint);\n        if (!minted) {\n            revert DSCEngine__MintFailed();\n        }\n    }\n\n    function burnDsc(uint256 amount) public moreThanZero(amount) {\n        _burnDsc(msg.sender, msg.sender, amount);\n        _revertIfHealthFactorIsBroken(msg.sender); // just in case\n    }\n\n    /**\n     * Liquidates an undercollateralized user by burning DSC to improve their health factor, and recovering their collateral\n     * @param tokenCollateralAddress the token to recover from the undercollateralized user\n     * @param user the undercollateralized user to be liquidated\n     * @param debtToCover the amount of DSC to be burnt to improve the user's health factor\n     * @notice the user's health factor must be lower than MINIMAL_HEALTH_FACTOR for the liquidation to be possible\n     */\n    function liquidate(address tokenCollateralAddress, address user, uint256 debtToCover)\n        external\n        moreThanZero(debtToCover)\n        tokenAllowed(tokenCollateralAddress)\n        nonReentrant\n    {\n        uint256 userInitialHealthFactor = _healthFactor(user);\n        if (userInitialHealthFactor >= MINIMAL_HEALTH_FACTOR) {\n            revert DSCEngine__UserHealthFactorOk();\n        }\n        uint256 tokenAmountFromDebtCovered = getTokenAmountFromUsd(tokenCollateralAddress, debtToCover);\n        uint256 bonusCollateral = tokenAmountFromDebtCovered * LIQUIDATION_BONUS / LIQUIDATION_PRECISION;\n        uint256 totalCollateralToRedeem = tokenAmountFromDebtCovered + bonusCollateral;\n        _redeemCollateral(user, msg.sender, tokenCollateralAddress, totalCollateralToRedeem);\n        _burnDsc(user, msg.sender, debtToCover);\n        uint256 userFinalHealthFactor = _healthFactor(user);\n        if (userFinalHealthFactor <= userInitialHealthFactor) {\n            revert DSCEngine__UserHealthFactorNotImproved();\n        }\n        _revertIfHealthFactorIsBroken(msg.sender);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                     PRIVATE AND INTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function _burnDsc(address onBehalfOf, address from, uint256 amount) private {\n        s_dscMinted[onBehalfOf] -= amount;\n        bool success = i_dsc.transferFrom(from, address(this), amount);\n        if (!success) {\n            revert DSCEngine__TransferFailed();\n        }\n        i_dsc.burn(amount);\n    }\n\n    function _redeemCollateral(address from, address to, address tokenCollateralAddress, uint256 amountCollateral)\n        private\n    {\n        s_collateralDeposited[from][tokenCollateralAddress] -= amountCollateral;\n        emit CollateralRedeemed(from, to, tokenCollateralAddress, amountCollateral);\n        bool success = IERC20(tokenCollateralAddress).transfer(to, amountCollateral);\n        if (!success) {\n            revert DSCEngine__TransferFailed();\n        }\n    }\n\n    function _getAccountInformation(address user)\n        private\n        view\n        returns (uint256 totalDscMinted, uint256 totalCollateralValueInUsd)\n    {\n        totalDscMinted = s_dscMinted[user];\n        totalCollateralValueInUsd = getAccountCollateralValue(user);\n    }\n\n    /**\n     *\n     * @param user the user to check the health factor of\n     * @notice returns how close to liquidation the user is, if the health factor is below 1, the user can be liquidated\n     */\n    function _healthFactor(address user) private view returns (uint256) {\n        (uint256 totalDscMinted, uint256 totalCollateralValueInUsd) = _getAccountInformation(user);\n        if (totalDscMinted == 0) {\n            return DEFAULT_HEALTH_FACTOR;\n        }\n        uint256 totalCollateralAdjustedToThreshold =\n            totalCollateralValueInUsd * LIQUIDATION_THRESHOLD / LIQUIDATION_PRECISION;\n        return totalCollateralAdjustedToThreshold * PRECISION / totalDscMinted;\n    }\n\n    function _revertIfHealthFactorIsBroken(address user) internal view {\n        uint256 userHealthFactor = _healthFactor(user);\n        if (userHealthFactor < MINIMAL_HEALTH_FACTOR) {\n            revert DSCEngine__UserHealthFactorIsTooLow(userHealthFactor);\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             VIEW FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function getHealthFactor(address user) external view returns (uint256) {\n        return _healthFactor(user);\n    }\n\n    function getTokenAmountFromUsd(address token, uint256 usdAmountInWei) public view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(s_priceFeeds[token]);\n        (, int256 price,,,) = priceFeed.staleCheckLatestRoundData();\n        return (usdAmountInWei * PRECISION) / (uint256(price) * ADDITIONAL_FEED_PRECISION);\n    }\n\n    function getAccountCollateralValue(address user) public view returns (uint256 totalValue) {\n        totalValue = 0; // seems to not be necessary\n        for (uint256 i = 0; i < s_collateralTokens.length; i++) {\n            address token = s_collateralTokens[i];\n            uint256 amount = s_collateralDeposited[user][token];\n            totalValue += getValue(token, amount);\n        }\n        return totalValue;\n    }\n\n    function getValue(address token, uint256 amount) public view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(s_priceFeeds[token]);\n        (, int256 price,,,) = priceFeed.staleCheckLatestRoundData();\n        return (uint256(price) * ADDITIONAL_FEED_PRECISION * amount) / PRECISION;\n    }\n\n    function getAccountInformation(address user) public view returns (uint256, uint256) {\n        return _getAccountInformation(user);\n    }\n\n    function getCollateralToken(uint256 index) public view returns (address) {\n        return s_collateralTokens[index];\n    }\n\n    function getPriceFeedFromToken(address token) public view returns (address) {\n        return s_priceFeeds[token];\n    }\n\n    function getUserCollateral(address user, address token) public view returns (uint256) {\n        return s_collateralDeposited[user][token];\n    }\n\n    function getDscMinted(address user) public view returns (uint256) {\n        return s_dscMinted[user];\n    }\n\n    function getDscAddress() public view returns (address) {\n        return address(i_dsc);\n    }\n}\n"
    },
    "src/DecentralizedStableCoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport {ERC20Burnable, ERC20} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title DecentralizedStableCoin\n * @author Antoine Douchet\n * @notice An algorithmic stablecoin pegged to 1 USD, backed by wETH and wBTC.\n * this contract is just the ERC20 token to the stablecoin, and is meant to be governed by DSCengine.\n */\ncontract DecentralizedStableCoin is ERC20Burnable, Ownable {\n    error DecentralizedStableCoin__MustBeMoreThanZero();\n    error DecentralizedStableCoin__BurnAmountExceedsBalance();\n    error DecentralizedStableCoin__CantSendToZeroAddress();\n\n    constructor() ERC20(\"DecentralizedStableCoin\", \"DSC\") Ownable(msg.sender) {}\n\n    function burn(uint256 _amount) public override onlyOwner {\n        if (_amount <= 0) {\n            revert DecentralizedStableCoin__MustBeMoreThanZero();\n        }\n        uint256 balance = balanceOf(msg.sender);\n        if (_amount > balance) {\n            revert DecentralizedStableCoin__BurnAmountExceedsBalance();\n        }\n        super.burn(_amount);\n    }\n\n    function mint(address _to, uint256 _amount) external onlyOwner returns (bool) {\n        if (_to == address(0)) {\n            revert DecentralizedStableCoin__CantSendToZeroAddress();\n        }\n        if (_amount <= 0) {\n            revert DecentralizedStableCoin__MustBeMoreThanZero();\n        }\n        _mint(_to, _amount);\n        return true;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "src/libraries/OracleLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n/**\n * @title OracleLib\n * @author Antoine Douchet\n * @notice Checks the oracle price feed to check for stale data\n * If the price feed is stale, the oracle will revert, and make the DSCEngine freeze and be unusable\n */\nlibrary OracleLib {\n    error OracleLib__StalePrice();\n\n    uint256 private constant TIMEOUT = 3 hours;\n\n    function staleCheckLatestRoundData(AggregatorV3Interface priceFeed)\n        public\n        view\n        returns (uint80, int256, uint256, uint256, uint80)\n    {\n        (uint80 roundId, int256 price, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) =\n            priceFeed.latestRoundData();\n        uint256 secondsSince = block.timestamp - updatedAt;\n        if (secondsSince > TIMEOUT) {\n            revert OracleLib__StalePrice();\n        }\n\n        return (roundId, price, startedAt, updatedAt, answeredInRound);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/",
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/",
      "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "foundry-devops/=lib/foundry-devops/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": { "enabled": true, "runs": 200 },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ]
      }
    },
    "evmVersion": "paris",
    "viaIR": false,
    "libraries": {}
  }
}
